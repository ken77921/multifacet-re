import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;

import entity_expansion.TopNLinkEntityExpander;

public class surfaceFormExpand {

    public static void main(String[] args) throws IOException{
	String queryName = args[0];
	HashSet<String> anchorTextExpansion = surfaceFormExpand.getAnchorTextExpansion(queryName, "docs/en-es-wiki.linktext.counts", 10);
	HashSet<String> redirectExpansionENG = surfaceFormExpand.getRedirectExpansion(queryName, "docs/enwiki-20160305-redirect.tsv");
	HashSet<String> redirectExpansionSPA = surfaceFormExpand.getRedirectExpansion(queryName, "docs/eswiki-20160305-redirect.tsv");
	HashSet<String> expansions = new HashSet<String>();
	expansions.addAll(anchorTextExpansion);
	expansions.addAll(redirectExpansionENG);
	expansions.addAll(redirectExpansionSPA);
	
	BufferedWriter bw = new BufferedWriter(new FileWriter("Expansion.txt"));
	bw.append("<name>" + queryName + "</name>\n");
  
	for(String expansion: expansions){
	    bw.append("<alias>" + expansion + "</alias>\n");
	}
	
	bw.close();
    }

    public static HashSet<String> getAnchorTextExpansion(String queryName, String AnchorTextFn, int maxN) throws IOException{
	TopNLinkEntityExpander expander =
	    new TopNLinkEntityExpander(AnchorTextFn, maxN, true);
	HashSet<String> aliases = new HashSet<String>();
        for (String expansion : expander.expand(queryName)) {
	    if (!expansion.toLowerCase().equals(queryName.toLowerCase()) && !expansion.isEmpty() &&
		Character.isUpperCase(expansion.charAt(0))) { // TODO: this is quadratic.
		aliases.add(expansion);
	    }
	}

	return aliases;
    }

    public static HashSet<String> getRedirectExpansion(String queryName, String RedirectFn) throws IOException{
	Map<String, String> redirect = new HashMap<String, String>();
	BufferedReader br = new BufferedReader(new FileReader(RedirectFn));
	String line;
	while((line = br.readLine()) != null){
	    String split[] = line.split("\t");
	    String firstSplit = split[0].split("E_SLUG_")[1].split("_langE[SN]")[0].replace('_', ' ');
	    String secondSplit = split[1].split("E_SLUG_")[1].split("_langE[SN]")[0].replace('_', ' ');
	    redirect.put(firstSplit, secondSplit);
	}
	br.close();

	Map<String, HashSet<String>> titleToRedirect = new HashMap<String, HashSet<String>>();
	for (Map.Entry<String, String> entry : redirect.entrySet()){
	    if(titleToRedirect.containsKey(entry.getValue())){
		titleToRedirect.get(entry.getValue()).add(entry.getKey());
	    }
	    else {
		titleToRedirect.put(entry.getValue(), new HashSet());
		titleToRedirect.get(entry.getValue()).add(entry.getKey());
	    }
	}

	HashSet<String> aliases = new HashSet<String>();

        if(redirect.containsKey(queryName)){
	    HashSet<String> expansions = titleToRedirect.get(redirect.get(queryName));
	    for(String expansion : expansions){
		if(!expansion.toLowerCase().equals(queryName.toLowerCase()) && Character.isUpperCase(expansion.charAt(0))){
		    aliases.add(expansion);
		}
	    }
	}

	return aliases;
    }
   
}
